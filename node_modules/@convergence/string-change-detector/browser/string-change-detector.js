/**!
Â© 2017 Convergence Labs, Inc.
@version 0.1.8
@license MIT
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("StringChangeDetector", [], factory);
	else if(typeof exports === 'object')
		exports["StringChangeDetector"] = factory();
	else
		root["StringChangeDetector"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(1).StringChangeDetector;

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var StringChangeDetector = exports.StringChangeDetector = function () {
	  function StringChangeDetector(options) {
	    _classCallCheck(this, StringChangeDetector);

	    if (!options) {
	      throw new Error("options must be defined");
	    }

	    if (typeof options.onInsert !== "function") {
	      throw new Error("options.onInsert must be a function");
	    }

	    if (typeof options.onRemove !== "function") {
	      throw new Error("options.onRemove must be a function");
	    }

	    if (typeof options.value !== "string") {
	      throw new Error("options.value must be a string");
	    }

	    this._onInsert = options.onInsert;
	    this._onRemove = options.onRemove;
	    this._value = options.value;
	  }

	  /**
	   * Inserts a string into the current value at the specified index.
	   *
	   * @param index {number}
	   *    The index in the string to insert into.
	   * @param value {string}
	   *   The value to insert into the string.
	   */


	  _createClass(StringChangeDetector, [{
	    key: "insertText",
	    value: function insertText(index, value) {
	      var oldVal = this._value;
	      var newVal = oldVal.substring(0, index) + value + oldVal.substring(index, oldVal.length);
	      this.setValue(newVal);
	    }

	    /**
	     * Removes a specified number of characters from the current string at
	     * a specific location.
	     *
	     * @param index {number}
	     *    The index in the string to remove characters.
	     * @param length {number}
	     *   The number of characters to remove.
	     */

	  }, {
	    key: "removeText",
	    value: function removeText(index, length) {
	      var oldVal = this._value;
	      var newVal = oldVal.substring(0, index) + oldVal.substring(index + length, oldVal.length);
	      this.setValue(newVal);
	    }

	    /**
	     * Sets the current value of the string.
	     *
	     * @param value {string}
	     *   The new value of the string.
	     */

	  }, {
	    key: "setValue",
	    value: function setValue(value) {
	      this._value = value;
	    }

	    /**
	     * Gets the current value of the string.
	     *
	     * @returns {string}
	     */

	  }, {
	    key: "getValue",
	    value: function getValue() {
	      return this._value;
	    }

	    /**
	     * Process the new value of the string after a single edit.
	     *
	     * @param newValue {string}
	     *   The new value to process.
	     */

	  }, {
	    key: "processNewValue",
	    value: function processNewValue(newValue) {
	      var commonEnd = 0;
	      var commonStart = 0;

	      if (this._value === newValue) {
	        return;
	      }

	      while (this._value.charAt(commonStart) === newValue.charAt(commonStart)) {
	        commonStart++;
	      }

	      while (this._value.charAt(this._value.length - 1 - commonEnd) === newValue.charAt(newValue.length - 1 - commonEnd) && commonEnd + commonStart < this._value.length && commonEnd + commonStart < newValue.length) {
	        commonEnd++;
	      }

	      // Characters were removed.
	      if (this._value.length !== commonStart + commonEnd) {
	        if (this._onRemove) {
	          this._onRemove(commonStart, this._value.length - commonStart - commonEnd);
	        }
	      }

	      // Characters were added
	      if (newValue.length !== commonStart + commonEnd) {
	        if (this._onInsert) {
	          this._onInsert(commonStart, newValue.slice(commonStart, newValue.length - commonEnd));
	        }
	      }

	      this._value = newValue;
	    }
	  }]);

	  return StringChangeDetector;
	}();

/***/ }
/******/ ])
});
;