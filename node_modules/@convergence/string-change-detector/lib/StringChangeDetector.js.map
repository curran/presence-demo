{"version":3,"sources":["StringChangeDetector.js"],"names":["StringChangeDetector","options","Error","onInsert","onRemove","value","_onInsert","_onRemove","_value","index","oldVal","newVal","substring","length","setValue","newValue","commonEnd","commonStart","charAt","slice"],"mappings":";;;;;;;;;;;;;;;IAAaA,+BAAAA;AACX,gCAAYC,OAAZ,EAAqB;AAAA;;AACnB,QAAI,CAACA,OAAL,EAAc;AACZ,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,QAAI,OAAOD,QAAQE,QAAf,KAA4B,UAAhC,EAA4C;AAC1C,YAAM,IAAID,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAI,OAAOD,QAAQG,QAAf,KAA4B,UAAhC,EAA4C;AAC1C,YAAM,IAAIF,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,QAAI,OAAOD,QAAQI,KAAf,KAAyB,QAA7B,EAAuC;AACrC,YAAM,IAAIH,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,SAAKI,SAAL,GAAiBL,QAAQE,QAAzB;AACA,SAAKI,SAAL,GAAiBN,QAAQG,QAAzB;AACA,SAAKI,MAAL,GAAcP,QAAQI,KAAtB;AACD;;AAED;;;;;;;;;;;;+BAQWI,OAAOJ,OAAO;AACvB,UAAMK,SAAS,KAAKF,MAApB;AACA,UAAMG,SACJD,OAAOE,SAAP,CAAiB,CAAjB,EAAoBH,KAApB,IACAJ,KADA,GAEAK,OAAOE,SAAP,CAAiBH,KAAjB,EAAwBC,OAAOG,MAA/B,CAHF;AAIA,WAAKC,QAAL,CAAcH,MAAd;AACD;;AAED;;;;;;;;;;;;+BASWF,OAAOI,QAAQ;AACxB,UAAMH,SAAS,KAAKF,MAApB;AACA,UAAMG,SAASD,OAAOE,SAAP,CAAiB,CAAjB,EAAoBH,KAApB,IACbC,OAAOE,SAAP,CAAiBH,QAAQI,MAAzB,EAAiCH,OAAOG,MAAxC,CADF;AAEA,WAAKC,QAAL,CAAcH,MAAd;AACD;;AAED;;;;;;;;;6BAMSN,OAAO;AACd,WAAKG,MAAL,GAAcH,KAAd;AACD;;AAED;;;;;;;;+BAKW;AACT,aAAO,KAAKG,MAAZ;AACD;;AAED;;;;;;;;;oCAMgBO,UAAU;AACxB,UAAIC,YAAY,CAAhB;AACA,UAAIC,cAAc,CAAlB;;AAEA,UAAI,KAAKT,MAAL,KAAgBO,QAApB,EAA8B;AAC5B;AACD;;AAED,aAAO,KAAKP,MAAL,CAAYU,MAAZ,CAAmBD,WAAnB,MAAoCF,SAASG,MAAT,CAAgBD,WAAhB,CAA3C,EAAyE;AACvEA;AACD;;AAED,aAAO,KAAKT,MAAL,CAAYU,MAAZ,CAAmB,KAAKV,MAAL,CAAYK,MAAZ,GAAqB,CAArB,GAAyBG,SAA5C,MACHD,SAASG,MAAT,CAAgBH,SAASF,MAAT,GAAkB,CAAlB,GAAsBG,SAAtC,CADG,IAEHA,YAAYC,WAAZ,GAA0B,KAAKT,MAAL,CAAYK,MAFnC,IAGHG,YAAYC,WAAZ,GAA0BF,SAASF,MAHvC,EAG+C;AAC7CG;AACD;;AAED;AACA,UAAI,KAAKR,MAAL,CAAYK,MAAZ,KAAuBI,cAAcD,SAAzC,EAAoD;AAClD,YAAI,KAAKT,SAAT,EAAoB;AAClB,eAAKA,SAAL,CAAeU,WAAf,EAA4B,KAAKT,MAAL,CAAYK,MAAZ,GAAqBI,WAArB,GAAmCD,SAA/D;AACD;AACF;;AAED;AACA,UAAID,SAASF,MAAT,KAAoBI,cAAcD,SAAtC,EAAiD;AAC/C,YAAI,KAAKV,SAAT,EAAoB;AAClB,eAAKA,SAAL,CAAeW,WAAf,EAA4BF,SAASI,KAAT,CAAeF,WAAf,EAA6BF,SAASF,MAAT,GAAkBG,SAA/C,CAA5B;AACD;AACF;;AAED,WAAKR,MAAL,GAAcO,QAAd;AACD","file":"StringChangeDetector.js","sourcesContent":["export class StringChangeDetector {\n  constructor(options) {\n    if (!options) {\n      throw new Error(\"options must be defined\");\n    }\n\n    if (typeof options.onInsert !== \"function\") {\n      throw new Error(\"options.onInsert must be a function\");\n    }\n\n    if (typeof options.onRemove !== \"function\") {\n      throw new Error(\"options.onRemove must be a function\");\n    }\n\n    if (typeof options.value !== \"string\") {\n      throw new Error(\"options.value must be a string\");\n    }\n\n    this._onInsert = options.onInsert;\n    this._onRemove = options.onRemove;\n    this._value = options.value;\n  }\n\n  /**\n   * Inserts a string into the current value at the specified index.\n   *\n   * @param index {number}\n   *    The index in the string to insert into.\n   * @param value {string}\n   *   The value to insert into the string.\n   */\n  insertText(index, value) {\n    const oldVal = this._value;\n    const newVal =\n      oldVal.substring(0, index) +\n      value +\n      oldVal.substring(index, oldVal.length);\n    this.setValue(newVal);\n  }\n\n  /**\n   * Removes a specified number of characters from the current string at\n   * a specific location.\n   *\n   * @param index {number}\n   *    The index in the string to remove characters.\n   * @param length {number}\n   *   The number of characters to remove.\n   */\n  removeText(index, length) {\n    const oldVal = this._value;\n    const newVal = oldVal.substring(0, index) +\n      oldVal.substring(index + length, oldVal.length);\n    this.setValue(newVal);\n  }\n\n  /**\n   * Sets the current value of the string.\n   *\n   * @param value {string}\n   *   The new value of the string.\n   */\n  setValue(value) {\n    this._value = value;\n  }\n\n  /**\n   * Gets the current value of the string.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    return this._value;\n  }\n\n  /**\n   * Process the new value of the string after a single edit.\n   *\n   * @param newValue {string}\n   *   The new value to process.\n   */\n  processNewValue(newValue) {\n    let commonEnd = 0;\n    let commonStart = 0;\n\n    if (this._value === newValue) {\n      return;\n    }\n\n    while (this._value.charAt(commonStart) === newValue.charAt(commonStart)) {\n      commonStart++;\n    }\n\n    while (this._value.charAt(this._value.length - 1 - commonEnd) ===\n        newValue.charAt(newValue.length - 1 - commonEnd) &&\n        commonEnd + commonStart < this._value.length &&\n        commonEnd + commonStart < newValue.length) {\n      commonEnd++;\n    }\n\n    // Characters were removed.\n    if (this._value.length !== commonStart + commonEnd) {\n      if (this._onRemove) {\n        this._onRemove(commonStart, this._value.length - commonStart - commonEnd);\n      }\n    }\n\n    // Characters were added\n    if (newValue.length !== commonStart + commonEnd) {\n      if (this._onInsert) {\n        this._onInsert(commonStart, newValue.slice(commonStart, (newValue.length - commonEnd)));\n      }\n    }\n\n    this._value = newValue;\n  }\n}\n"],"sourceRoot":"/source/"}